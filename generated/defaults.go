package generated

// Do not edit, this file is automatically generated.

// Defaults: scaffolding used in 'build' command
var Defaults = map[string][]byte{
	"/.gitignore": []byte(``),
	"/assets/favicon.svg": []byte(`<?xml version="1.0" encoding="UTF-8"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg width="47.596mm" height="47.596mm" version="1.1" viewBox="0 0 47.596 47.596" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
 <metadata>
  <rdf:RDF>
   <cc:Work rdf:about="">
    <dc:format>image/svg+xml</dc:format>
    <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
    <dc:title/>
   </cc:Work>
  </rdf:RDF>
 </metadata>
 <g transform="translate(-76.94 -96.762)" fill-rule="evenodd">
  <rect x="78.35" y="98.172" width="44.777" height="44.777" rx="4.5237" ry="4.5237" fill="#22a6ed" stroke="#22a6ed" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.8191"/>
  <path d="m88.5 112.76v26.379h8.4959v-15.879z" fill="#fff" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.2401"/>
  <ellipse cx="101.01" cy="113.8" rx="13.633" ry="12.244" fill="#fff"/>
  <circle cx="97.99" cy="116.82" r="3.0232" fill="#22a6ed"/>
 </g>
</svg>
`),
	"/assets/planarian.svg": []byte(`<?xml version="1.0" encoding="UTF-8"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg width="17.198mm" height="10.181mm" version="1.1" viewBox="0 0 17.198 10.181" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
 <metadata>
  <rdf:RDF>
   <cc:Work rdf:about="">
    <dc:format>image/svg+xml</dc:format>
    <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage"/>
    <dc:title/>
   </cc:Work>
  </rdf:RDF>
 </metadata>
 <g transform="translate(-40.209 -130.72)">
  <g transform="matrix(1.3 0 0 1.1144 40.209 130.72)">
   <path d="m6.6673 1.813e-4c-1.953 0-3.6607 0.69066-4.5908 1.7211-0.52576 0.44023-1.4459 0.9324-1.9542 1.5089-0.64883 0.77015 1.4941 1.2374 1.5201 1.082 1.014 2.3097 3.0629 4.7858 5.0251 4.8227 1.6019-0.20416 4.5794-2.7157 5.2157-4.8985 0.47393-0.10216 1.5689-0.11342 1.3057-1.0064-0.23881-0.29694-1.917-1.5061-1.9485-1.5289-0.93421-1.0194-2.6326-1.7011-4.573-1.7011z" fill="#22a6ed" fill-rule="evenodd" stroke-width=".30799"/>
   <path d="m6.6673 1.813e-4c-2.9475 0-5.3371 1.573-5.3371 3.5132 0.84508 2.4965 3.1458 5.5801 5.3371 5.6214 1.7828-0.22722 5.2699-3.3124 5.3371-5.6214 0-1.9404-2.3894-3.5132-5.3371-3.5132z" fill="none" stroke-width=".30799"/>
   <g transform="matrix(.30799 0 0 .30799 -14.116 -33.832)" fill-rule="evenodd">
    <path d="m55.19 130.96c-1.486-2.0735 7.8403 7.0493 12.324 7.0871 4.8974-0.29154 13.838-8.7206 12.619-7.2432-1.1598 1.7268-7.6713 8.6765-12.652 8.7053-5.4222-0.0543-10.702-6.333-12.29-8.5492z" fill="#1c7fc7"/>
    <path d="m77.069 125.83c0-0.0211 0.36697 4.1258-3.4253 4.8676-3.7923-0.15207-4.1593-4.7915-4.1593-4.7915z" fill="#1c7fc7"/>
    <path d="m77.604 123.27a4.21 6.6213 0 0 1-4.2101 6.6213 4.21 6.6213 0 0 1-4.21-6.6213 4.21 6.6213 0 0 1 4.21-6.6213 4.21 6.6213 0 0 1 4.2101 6.6213z" fill="#fff"/>
    <path d="m57.792 125.85c0-8e-3 -0.36697 4.0827 3.4253 4.8676 3.7923-0.15206 4.0981-4.9436 4.0981-4.9436z" fill="#1c7fc7"/>
    <path d="m65.693 123.27a4.21 6.6213 0 0 1-4.2101 6.6213 4.21 6.6213 0 0 1-4.21-6.6213 4.21 6.6213 0 0 1 4.21-6.6213 4.21 6.6213 0 0 1 4.2101 6.6213z" fill="#fff"/>
   </g>
   <g transform="matrix(.30799 0 0 .30799 -14.116 -33.832)" fill="#082f58" fill-rule="evenodd">
    <path d="m50.843 120.04c-0.81738 0.19161-2.8496 0.96099-2.4963 1.4176 0.34641 0.28078 2.6716 1.5627 2.6692 0.71228 0-0.74229 0.18804-2.2145-0.17296-2.1299z"/>
    <ellipse cx="62.85" cy="123.67" rx="2.4372" ry="3.0305"/>
    <ellipse cx="71.874" cy="123.67" rx="2.4372" ry="3.0305"/>
   </g>
   <path d="m6.6673 1.813e-4c-1.953 0-3.6607 0.69066-4.5908 1.7211l0.00456-0.027413s-1.7177 1.2366-1.9588 1.5363c-0.34657 1.1756 1.0232 0.78974 1.5068 1.1615l0.013284-0.079487c1.014 2.3097 3.0629 4.7858 5.0251 4.8227 1.6019-0.20416 4.5794-2.7157 5.2157-4.8985 0.47393-0.10216 1.5689-0.11342 1.3057-1.0064-0.23881-0.29694-1.917-1.5061-1.9485-1.5289-0.93421-1.0194-2.6326-1.7011-4.573-1.7011z" fill="none" stroke-width=".30799"/>
   <g transform="matrix(.30799 0 0 .30799 -14.116 -33.832)" fill-rule="evenodd">
    <path d="m84.158 119.72c0.81738 0.19161 2.8497 0.96099 2.4963 1.4176-0.34641 0.28078-2.6716 1.5627-2.6692 0.71228 0-0.74229-0.18804-2.2145 0.17296-2.1299z" fill="#082f58"/>
    <ellipse cx="70.913" cy="122.84" rx=".75036" ry=".93304" fill="#fff"/>
    <ellipse cx="62.092" cy="122.84" rx=".75036" ry=".93304" fill="#fff"/>
   </g>
  </g>
 </g>
</svg>
`),
	"/content/blog/_blueprint.json": []byte(`{
    "title": "text",
    "body": ["text"],
    "author": "text",
    "date": "date"
}`),
	"/content/blog/adding_pletiform.json": []byte(`{
    "title": "Build sites with good form",
    "body": [
        "Need an easy webform solution?",
        "Try adding a <a href='https://plentiform.com' target='blank' rel='noopener noreferrer'>plentiform</a>! (Coming soon)"
    ],
    "author": "Jim Fisk",
    "date": "1/26/2020"
}`),
	"/content/blog/post1.json": []byte(`{
    "title": "Post 1",
    "body": [
        "The first of the posts"
    ],
    "author": "Jim Fisk",
    "date": "1/24/2020"
}`),
	"/content/blog/post2.json": []byte(`{
    "title": "Svelte writable stores example",
    "body": [
        "Here's a basic counter implementation using Svelte Writable Stores"
    ],
    "store": true,
    "author": "Jim Fisk",
    "date": "8/25/2020"
}`),
	"/content/index.json": []byte(`{
	"title": "My Plenti Site",
	"intro": {
		"slogan": "Welcome to <a href='https://plenti.co' target='blank' rel='noopener noreferrer'>Plenti</a>! <em>A quicker way to build websites.</em>",
		"help": [
			"Take a look around to see how things work.",
			"The bottom of each page will tell you where to find the corresponding template in your project.",
			"If you get stuck or need extra help, just <a href=\"/contact\">let us know</a>",
			"We hope you enjoy :)"
		]
	},
	"components": [
		{
			"component": "template",
			"fields": {"type": "index"}
		}
	]
}`),
	"/content/pages/_blueprint.json": []byte(`{
	"title": "text",
	"description": ["text"],
	"author": "text"
}`),
	"/content/pages/about.json": []byte(`{
	"title": "About Plenti",
	"description": [
		"Plenti is a minimalist <a href='https://jamstack.org/' target='blank' rel='noopener noreferrer'>JAMstack</a> framework that's flexible and easy to use.",
		"We've cut out as many dependencies as possible so you can focus on being productive instead of wrestling with a complicated toolchain.",
		"The <a href='https://svelte.dev/' target='blank' rel='noopener noreferrer'>Svelte</a> frontend <em>cuts weight</em> so users get a snappy experience, even with bad internet connections or underpowered devices.",
		"The <a href='https://golang.org/' target='blank' rel='noopener noreferrer'>Go</a> backend <em>cuts wait</em> so apps build faster allowing devs to get more done and editors to get realtime feedback on content changes.",
		"Thanks for taking a look!"
	],
	"author": "Jim Fisk"
}`),
	"/content/pages/contact.json": []byte(`{
	"title": "Contact",
	"description": [
		"Plenti is 100% free and open source!",
		"You can fork it for your own purposes, or help us out by reporting bugs / contributing code on <a href='https://github.com/plentico/plenti' target='blank' rel='noopener noreferrer'>Our GitHub</a>."
	],
	"author": "Jim Fisk"
}`),
	"/layout/components/decrementer.svelte": []byte(`<script>
  import { count } from '../scripts/stores.svelte';

  function decrement() {
    count.update(n => n - 1);
  }
</script>

<button on:click={decrement}>
  -
</button>`),
	"/layout/components/grid.svelte": []byte(`<script>
  import { sortByDate } from '../scripts/sort_by_date.svelte';
  export let items, filter;
</script>

<div class="grid">
  {#each sortByDate(items) as item}
		{#if item.type == filter}
      <a class="grid-item" href="{item.path}">{item.fields.title}</a>
		{/if}
  {/each}
</div>

<style>
  .grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-column-gap: 10px;
    grid-row-gap: 10px;
  }
  .grid-item {
    display: flex;
    flex-grow: 1;
    height: 200px;
    align-items: center;
    justify-content: center;
    background: var(--primary);
    font-weight: bold;
    border-radius: 5px;
    color: white;
  }
  a::before {
    content: none;
  }
</style>
`),
	"/layout/components/incrementer.svelte": []byte(`<script>
  import { count } from '../scripts/stores.svelte';

  function increment() {
    count.update(n => n + 1);
  }
</script>

<button on:click={increment}>
  +
</button>`),
	"/layout/components/template.svelte": []byte(`<script>
  export let type;

  let path;
  let copyText = "Copy";
  const copy = async () => {
    if (!navigator.clipboard) {
      return
    }
    try {
      copyText = "Copied";
      await navigator.clipboard.writeText(path.innerHTML);
      setTimeout(() => copyText = "Copy", 500);
    } catch (err) {
      console.error('Failed to copy!', err)
    }
  }
</script>

<div class="template">
  <span>Template:</span>
  <pre>
    <code bind:this={path} class="{copyText}">layout/content/{type}.svelte</code>
    <button on:click={copy}>{copyText}</button>
  </pre>
</div>

<style>
  .template {
    display: flex;
    align-items: center;
  }
  pre {
    display: flex;
    padding-left: 5px;
  }
  code {
      background-color: var(--base);
      padding: 5px 10px;
  }
  code.copied {
      background-color: var(--accent);
  }
  button {
    border: 1px solid rgba(0,0,0,.1);
    background: white;
    padding: 4px;
    border-top-right-radius: 5px;
    border-bottom-right-radius: 5px;
    cursor: pointer;
  }
</style>`),
	"/layout/content/404.svelte": []byte(`<h1>Oops... 404 not found</h1>
<a href="/">Go home?</a>`),
	"/layout/content/blog.svelte": []byte(`<script>
	export let title, body, author, date, store;
  import Uses from "../components/template.svelte";

  // Svelte store example:
  import { count } from '../scripts/stores.svelte';
  import Incrementer from '../components/incrementer.svelte';
  import Decrementer from '../components/decrementer.svelte';
  let count_value;
  const unsubscribe = count.subscribe(value => {
    count_value = value;
  });
</script>

<h1>{title}</h1>

<p><em>{#if author}Written by {author}{/if}{#if date}&nbsp;on {date}{/if}</em></p>

<div>
  {#each body as paragraph}
    <p>{@html paragraph}</p>
  {/each}
</div>

{#if store}
  <h1>The count is {count_value}</h1>
  <Incrementer/>
  <Decrementer/>  
{/if}

<Uses type="blog" />

<p><a href="/">Back home</a></p>
`),
	"/layout/content/index.svelte": []byte(`<script>
	export let title, intro, components, allContent;
	import Grid from '../components/grid.svelte';
	import { loadComponent } from '../scripts/load_component.svelte';
</script>

<h1>{title}</h1>

<section id="intro">
	<p>{@html intro.slogan}</p>
</section>

<section id="intro">
	{#each intro.help as paragraph}
		<p>{@html paragraph}</p>
	{/each}
</section>

<div>
	<h3>Recent blog posts:</h3>
	<Grid items={allContent} filter="blog" />
	<br />
</div>

{#if components}
	{#each components as { component, fields }}
		{#await loadComponent(component)}
			loading component...
		{:then compClass}
			<svelte:component this="{compClass}" {...fields} />
		{:catch error}
			{console.log(error.message)}
		{/await}
	{/each}
{/if}`),
	"/layout/content/pages.svelte": []byte(`<script>
  export let title, description;
  import Uses from "../components/template.svelte";
</script>

<h1>{title}</h1>

<div>
  {#each description as paragraph}
    <p>{@html paragraph}</p>
  {/each}
</div>

<Uses type="pages" />

<p><a href="/">Back home</a></p>`),
	"/layout/global/footer.svelte": []byte(`<script>
  export let allContent;
  import { makeTitle } from '../scripts/make_title.svelte';
</script>

<footer>
  <div class="container">
    <span>All content:</span>
    {#each allContent as content}
      <a href="{content.path}">{makeTitle(content.filename)}</a>
    {/each}
  </div>
</footer>

<style>
  footer {
    min-height: 200px;
    display: flex;
    align-items: center;
    background-color: var(--base-dark);
    margin-top: 100px;
  }
  span {
    color: var(--primary);
    font-weight: bold;
  }
  a {
    color: white;
    text-decoration: none;
    margin-left: 10px;
  }
</style>
`),
	"/layout/global/head.svelte": []byte(`<script>
  export let title;
</script>

<head>
  <meta charset='utf-8'>
  <meta name='viewport' content='width=device-width,initial-scale=1'>

  <title>{ title }</title>

  <link href="https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,300;0,700;1,300&display=swap" rel="stylesheet">
  <link rel="icon" type="image/svg+xml" href="/assets/favicon.svg">
  <link rel='stylesheet' href='/spa/bundle.css'>
</head>
`),
	"/layout/global/html.svelte": []byte(`<script>
  import Head from './head.svelte';
  import Nav from './nav.svelte';
  import Footer from './footer.svelte';
  import { makeTitle } from '../scripts/make_title.svelte';

  export let route, content, allContent;
</script>

<html lang="en">
<Head title={makeTitle(content.filename)} />
<body>
  <Nav />
  <main>
    <div class="container">
      <svelte:component this={route} {...content.fields} {allContent} />
      <br />
    </div>
  </main>
  <Footer {allContent} />
</body>
</html>

<style>
  body {
    font-family: 'Rubik', sans-serif;
    display: flex;
    flex-direction: column;
    margin: 0;
  }
  main {
    flex-grow: 1;
  }
  :global(.container) {
    max-width: 1024px;
    margin: 0 auto;
    flex-grow: 1;
    padding: 0 20px;
  }
  :global(:root) {
    --primary: rgb(34, 166, 237);
    --primary-dark: rgb(16, 92, 133);
    --accent: rgb(254, 211, 48);
    --base: rgb(245, 245, 245);
    --base-dark: rgb(17, 17, 17);
  }
  :global(main a) {
    position: relative;
    text-decoration: none;
    color: var(--base-dark);
    padding-bottom: 5px;
  }
  :global(main a:before) {
    content: "";
    width: 100%;
    height: 100%;
    background-image: linear-gradient(to top, var(--accent) 25%, rgba(0, 0, 0, 0) 40%);  
    position: absolute;
    left: 0;
    bottom: 2px;
    z-index: -1;   
    will-change: width;
    transform: rotate(-2deg);
    transform-origin: left bottom;
    transition: width .1s ease-out;
  }
  :global(main a:hover:before) {
    width: 0;
    transition-duration: .15s;
  }
</style>
`),
	"/layout/global/nav.svelte": []byte(`<nav>
  <div class="container">
    <span id="brand"><a href="/"><img alt="planarian" src="/assets/planarian.svg" />Home</a></span>
    <a href="/about">About</a>&nbsp;
    <a href="/contact">Contact</a>
  </div>
</nav>

<style>
  nav, .container, #brand, #brand a {
    display: flex;
  }
  nav {
    min-height: 60px;
    box-shadow: 0px 2px 3px var(--base);
  }
  #brand {
    flex: 1;
  }
  a {
    align-self: center;
    align-items: center;
    color: var(--base-dark);
    text-decoration: none;
  }
  img {
    margin-right: 10px;
  }
</style>
`),
	"/layout/scripts/load_component.svelte": []byte(`<script context="module">
  export const loadComponent = component => {
    let compClassPromise = import("../components/" + component + ".svelte").then(res => res.default);
    // Fix "Unhandled promise rejection" error.
    // See: https://github.com/sveltejs/sapper/issues/487#issuecomment-529145749
    compClassPromise.catch(err => null)
    return compClassPromise;
  }
</script>
`),
	"/layout/scripts/make_title.svelte": []byte(`<script context="module">
  export const makeTitle = filename => {
  if (filename == 'index.json') {
    return 'Home';
  } else if (filename) {
    // Remove file extension.
    filename = filename.split('.').slice(0, -1).join('.');
    // Convert underscores and hyphens to spaces.
    filename = filename.replace(/_|-/g,' ');
    // Capitalize first letter of each word.
    filename = filename.split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ');
  } 
  return filename;
  }
</script>
`),
	"/layout/scripts/sort_by_date.svelte": []byte(`<script context="module">
  export const sortByDate = (items, order) => {
    items.sort((a, b) => { 
      // Must have a field specifically named "date" to work.
      // Feel free to extend to other custom named date fields.
      if (a.fields.hasOwnProperty("date") && b.fields.hasOwnProperty("date")) {
        let aDate = new Date(a.fields.date);
        let bDate = new Date(b.fields.date);
        if (order == "oldest") {
            return aDate - bDate;
        }
        return bDate - aDate;
      }
    });
    return items;
  };
</script>`),
	"/layout/scripts/stores.svelte": []byte(`<script context="module">
  import { writable } from 'svelte/store';
  export const count = writable(0);
</script>`),
	"/package.json": []byte(`{
  "name": "my-plenti-app",
  "version": "1.0.0",
  "type": "module",
  "private": true,
  "dependencies": {
    "navaid": "^1.1.1",
    "regexparam": "^1.3.0",
    "svelte": "^3.23.2"
  }
}
`),
	"/plenti.json": []byte(`{
	"baseurl": "http://example.org/",
	"title": "My New Plenti Site",
	"types": {
		"pages": "/:filename"
	},
	"build": "public",
	"local": {
		"port": 3000
	}
}`),
}
