package main

import (
	"io"
	"os"
	"path/filepath"
)

// Reads all files in "defaults" folder
// and encodes them as strings literals in generated_defaults.go
func main() {
	out, _ := os.Create("generated_defaults.go")
	out.Write([]byte("package main"))
	out.Write([]byte("\n\n// Do not edit, this file is automatically generated."))
	out.Write([]byte("\n\n// Defaults: scaffolding used in 'new site' command"))
	out.Write([]byte("\nvar Defaults = map[string][]byte{\n"))
	filepath.Walk("defaults",
		func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}
			if !info.IsDir() {
				out.Write([]byte("\t\"" + path + "\": []byte(`"))
				f, _ := os.Open(path)
				io.Copy(out, f)
				out.Write([]byte("`),\n"))
			}
			return nil
		})
	out.Write([]byte("}\n"))

	/*
		fs, _ := ioutil.ReadDir("defaults/content")
		out, _ := os.Create("generated_defaults.go")
		out.Write([]byte("package main"))
		out.Write([]byte("\n\n// Do not edit, this file is automatically generated."))
		out.Write([]byte("\n\n// Defaults: scaffolding used in 'new site' command"))
		out.Write([]byte("\nvar Defaults = map[string][]byte{\n"))
		for _, f := range fs {
			out.Write([]byte("\t\"" + f.Name() + "\": []byte(`"))
			f, _ := os.Open("defaults/content/" + f.Name())
			io.Copy(out, f)
			out.Write([]byte("`),\n"))
		}
		out.Write([]byte("}\n"))
	*/
}
