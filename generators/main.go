package main

import (
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// Packages static files in your Go binary.
func main() {
	// Reads all files in "defaults" folder and
	// encodes them as string literals in generated/defaults.go
	generate("defaults")
	// Reads all files in "defaults_bare" folder and
	// encodes them as string literals in generated/defaults_bare.go
	generate("defaults_bare")
	// Reads all files in "defaults_node_modules" folder and
	// encodes them as string literals in generated/defaults_node_modules.go
	generate("defaults_node_modules")
	// Reads all files in "ejected" folder and
	// encodes them as string literals in generated/ejected.go
	generate("ejected")
}

func generate(name string) {
	out, _ := os.Create("generated/" + name + ".go")
	out.Write([]byte("package generated"))
	out.Write([]byte("\n\n// Do not edit, this file is automatically generated."))
	out.Write([]byte("\n\n// " + strings.Title(name) + ": scaffolding used in 'build' command"))
	out.Write([]byte("\nvar " + strings.Title(name) + " = map[string][]byte{\n"))
	filepath.Walk(name,
		func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}
			if !info.IsDir() {
				// Get the contents of the current file.
				content, _ := ioutil.ReadFile(path)
				// Correct filename of the .gitignore file.
				if strings.HasSuffix(path, "_plenti_replace") {
					path = strings.TrimSuffix(path, "_plenti_replace")
				}
				// Add a key for the filename to the map.
				out.Write([]byte("\t\"" + strings.TrimPrefix(path, name) + "\": []byte(`"))
				// Escape the backticks that would break string literals
				escapedContent := strings.Replace(string(content), "`", "`+\"`\"+`", -1)
				// Add the content as the value of the map.
				out.Write([]byte(escapedContent))
				// End the specific file entry in the map.
				out.Write([]byte("`),\n"))
			}
			return nil
		})
	out.Write([]byte("}\n"))
}
